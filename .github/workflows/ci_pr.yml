name: CI for pull requests
on:
  pull_request:
    branches:
      - master

env:
  APPLICATION_ENV: ci.pgsql
  SPRYKER_TESTING_ENABLED: 1
  APPLICATION_STORE: DE
  POSTGRES_PORT: 5433
  POSTGRES_USER: postgres
  POSTGRES_DB: DE_test_zed
  DB_PASSWORD: secret

jobs:
  install-dependencies:
    name: 'Install dependencies'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: redis
          ini-values: memory_limit=-1
      - uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
      - run: composer install --optimize-autoloader --no-interaction

  unit-tests:
    name: 'Run unit/functional tests'
    needs:
      - code-style
      - code-architecture
      - phpstan
    runs-on: ubuntu-20.04
    services:
      database:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: redis
          ini-values: memory_limit=-1
      - uses: actions/cache@v2
        id: composer-cache
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
      - name: 'Composer install'
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --optimize-autoloader --no-interaction
      - name: 'Install project'
        run: vendor/bin/install DE -r ci -s generate -s cache -s database-migrate -s setup-test -s demodata-functional
      - name: 'Run tests'
        run: vendor/bin/codecept run -c codeception.ci.functional.yml

  code-style:
    name: 'Check code style'
    needs:
      - install-dependencies
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: redis
          ini-values: memory_limit=-1
      - uses: actions/cache@v2
        id: composer-cache
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
      - name: 'Composer install'
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --optimize-autoloader --no-interaction
      - name: 'Install project'
        run: vendor/bin/install DE -r ci -s generate -s setup-test
      - name: 'Run code:sniff:style'
        run: vendor/bin/console code:sniff:style

  code-architecture:
    name: 'Check code architecture'
    needs:
      - install-dependencies
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: redis
          ini-values: memory_limit=-1
      - uses: actions/cache@v2
        id: composer-cache
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
      - name: 'Composer install'
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --optimize-autoloader --no-interaction
      - name: 'Install project'
        run: vendor/bin/install DE -r ci -s generate -s setup-test
      - name: 'Run code:sniff:architecture'
        run: vendor/bin/console code:sniff:architecture

  phpstan:
    name: 'Static analysis with PHPStan'
    needs:
      - install-dependencies
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: redis
          ini-values: memory_limit=-1
      - uses: actions/cache@v2
        id: composer-cache
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
      - name: 'Composer install'
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --optimize-autoloader --no-interaction
      - name: 'Install project'
        run: vendor/bin/install DE -r ci -s generate -s setup-test
      - name: 'Run phpstan'
        run: php -d memory_limit=1024M vendor/bin/console code:phpstan

